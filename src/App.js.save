import React, { useState, useEffect, useRef } from "react";
import styled from "styled-components";
import io from "socket.io-client";
import micro from "./assets/micro.png";
import UIfx from "uifx";
import microAudio from "./assets/micro.mp3";

import SpeechRecognition, {
  useSpeechRecognition,
} from "react-speech-recognition";

const Page = styled.div`
  display: flex;
  height: 100vh;
  width: 100%;
  align-items: center;
  background-color: white;
  flex-direction: column;
`;

const Container = styled.div`
  display: flex;
  flex-direction: column;
  height: 500px;
  max-height: 500px;
  overflow: auto;
  width: 400px;
  border: 1px solid lightgray;
  border-radius: 10px;
  padding-bottom: 10px;
  margin-top: 25px;
`;

const TextArea = styled.textarea`
  width: 98%;
  height: 100px;
  border-radius: 10px;
  margin-top: 10px;
  padding-left: 10px;
  padding-top: 10px;
  font-size: 17px;
  background-color: gainsboro;
  border: 1px solid lightgray;
  outline: none;
  color: black;
  letter-spacing: 1px;
  line-height: 20px;
  ::placeholder {
    color: lightgray;
  }
`;

const Form = styled.form`
  width: 400px;
`;

const MyRow = styled.div`
  width: 100%;
  display: flex;
  justify-content: flex-end;
  margin-top: 10px;
`;

const MyMessage = styled.div`
  width: 45%;
  background-color: pink;
  color: #46516e;
  padding: 10px;
  margin-right: 5px;
  text-align: center;
  border-top-right-radius: 10%;
  border-bottom-right-radius: 10%;
`;

const PartnerRow = styled(MyRow)`
  justify-content: flex-start;
`;

const PartnerMessage = styled.div`
  width: 45%;
  background-color: transparent;
  color: lightgray;
  border: 1px solid lightgray;
  padding: 10px;
  margin-left: 5px;
  text-align: center;
  border-top-left-radius: 10%;
  border-bottom-left-radius: 10%;
`;

const App = () => {
  const [yourID, setYourID] = useState();
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState("");

  const beep = new UIfx(microAudio);

  const socketRef = useRef();

  // var connectionOptions = {
  //   "force new connection": true,
  //   reconnectionAttempts: "Infinity",
  //   timeout: 10000,
  //   transports: ["websocket"],
  // };

  useEffect(() => {
    socketRef.current = io.connect("http://203.171.21.65:8080/http://203.171.21.65:8080/");

    socketRef.current.on("your id", (id) => {
      setYourID(id);
    });

    socketRef.current.on("message", (message) => {
      console.log("here");
      console.log(message);
      receivedMessage(message);
    });
  }, []);

  const commands = [
    {
      command: "*",
      callback: (text) => {
        setMessage(text);
      },
    },
  ];

  const { transcript, resetTranscript } = useSpeechRecognition({ commands });
  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {
    return null;
  }

  function receivedMessage(message) {
    setMessages((oldMsgs) => [...oldMsgs, message]);
  }

  function sendMessage(e) {
    e.preventDefault();
    const messageObject = {
      body: message,
      id: yourID,
    };
    setMessage("");
    socketRef.current.emit("send message", messageObject);
    receivedMessage(messageObject);
  }

  function handleChange(e) {
    setMessage(e.target.value);
  }

  return (
    <Page>
      <Container>
        {messages.map((message, index) => {
          if (message.id === yourID) {
            return (
              <MyRow key={index}>
                <MyMessage>{message.body}</MyMessage>
              </MyRow>
            );
          }
          return (
            <PartnerRow key={index}>
              <PartnerMessage>{message.body}</PartnerMessage>
            </PartnerRow>
          );
        })}
      </Container>
      <Form>
        <div style={{ position: "relative" }}>
          <TextArea
            value={message}
            onChange={handleChange}
            placeholder="Say something..."
          />
          <span
            style={{ position: "absolute", right: 0, bottom: 10 }}
            onClick={() => {
              beep.play();
              SpeechRecognition.startListening();
            }}
          >
            <img src={micro} alt="micro" width={30} />
          </span>
        </div>
        <button onClick={sendMessage}>Send</button>{" "}
        {/* <button onClick={SpeechRecognition.startListening}>Micro</button> */}
      </Form>
      <div>{/* <p>{transcript}</p> */}</div>
    </Page>
  );
};

export default App;
